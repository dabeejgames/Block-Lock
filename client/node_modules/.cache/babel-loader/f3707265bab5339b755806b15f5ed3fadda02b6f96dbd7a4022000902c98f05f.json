{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Beej\\\\Documents\\\\Block-Lock\\\\client\\\\src\\\\components\\\\GameBoard.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport './GameBoard.css';\n\n/**\r\n * GameBoard component for Block Lock game.\r\n * Displays previous guesses, current guess, feedback, and empty rows.\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameBoard = ({\n  guesses = [],\n  currentGuess = [],\n  codeLength = 4,\n  maxGuesses = 10\n}) => {\n  // Calculate how many empty rows to display\n  const showCurrent = guesses.length < maxGuesses;\n  const emptyRows = Math.max(0, maxGuesses - guesses.length - (showCurrent ? 1 : 0));\n\n  // Render feedback dots for a guess\n  const renderFeedback = (feedback = {\n    correct: 0,\n    wrongPosition: 0\n  }) => {\n    const dots = [];\n    for (let i = 0; i < feedback.correct; i++) {\n      dots.push(/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"feedback-dot correct\",\n        \"aria-label\": \"Correct color and position\"\n      }, `correct-${i}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this));\n    }\n    for (let i = 0; i < feedback.wrongPosition; i++) {\n      dots.push(/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"feedback-dot wrong-position\",\n        \"aria-label\": \"Correct color, wrong position\"\n      }, `wrong-pos-${i}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this));\n    }\n    const remaining = codeLength - feedback.correct - feedback.wrongPosition;\n    for (let i = 0; i < remaining; i++) {\n      dots.push(/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"feedback-dot incorrect\",\n        \"aria-label\": \"Incorrect\"\n      }, `incorrect-${i}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this));\n    }\n    return dots;\n  };\n\n  // Render a single color block\n  const renderBlock = (color, idx, isCurrent) => /*#__PURE__*/_jsxDEV(\"span\", {\n    className: `color-block${isCurrent ? ' current' : ''}`,\n    \"aria-label\": color ? `Color ${color}` : 'Empty slot',\n    style: {\n      background: color || '#eee',\n      border: color ? '2px solid #333' : '2px dashed #bbb',\n      width: 28,\n      height: 28,\n      borderRadius: '50%',\n      display: 'inline-block',\n      margin: 2\n    },\n    children: !color && /*#__PURE__*/_jsxDEV(\"span\", {\n      style: {\n        opacity: 0.2\n      },\n      children: \"?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 18\n    }, this)\n  }, idx, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gameboard-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gameboard\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gameboard-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"guess-column\",\n          children: \"Guess\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"feedback-column\",\n          children: \"Feedback\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gameboard-rows\",\n        children: [guesses.map((guess, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"gameboard-row completed\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"guess-display\",\n            children: Array.from({\n              length: codeLength\n            }, (_, idx) => {\n              var _guess$code;\n              return renderBlock((_guess$code = guess.code) === null || _guess$code === void 0 ? void 0 : _guess$code[idx], idx, false);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"feedback-display\",\n            children: renderFeedback(guess.feedback)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 15\n          }, this)]\n        }, `guess-${index}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this)), showCurrent && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"gameboard-row current\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"guess-display\",\n            children: Array.from({\n              length: codeLength\n            }, (_, idx) => renderBlock(currentGuess === null || currentGuess === void 0 ? void 0 : currentGuess[idx], idx, true))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"feedback-display\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"feedback-placeholder\",\n              \"aria-label\": \"Awaiting feedback\",\n              children: \"?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }, this), Array.from({\n          length: emptyRows\n        }, (_, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"gameboard-row empty\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"guess-display\",\n            children: Array.from({\n              length: codeLength\n            }, (__, digitIdx) => renderBlock(null, digitIdx, false))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"feedback-display\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"feedback-placeholder\",\n              \"aria-label\": \"Empty feedback\",\n              children: \"-\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 15\n          }, this)]\n        }, `empty-${index}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gameboard-footer\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Attempts: \", guesses.length, showCurrent ? `/${maxGuesses}` : ` (max reached)`]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n_c = GameBoard;\nGameBoard.propTypes = {\n  guesses: PropTypes.arrayOf(PropTypes.shape({\n    code: PropTypes.arrayOf(PropTypes.string),\n    feedback: PropTypes.shape({\n      correct: PropTypes.number,\n      wrongPosition: PropTypes.number\n    })\n  })),\n  currentGuess: PropTypes.arrayOf(PropTypes.string),\n  codeLength: PropTypes.number,\n  maxGuesses: PropTypes.number\n};\nexport default GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["React","PropTypes","jsxDEV","_jsxDEV","GameBoard","guesses","currentGuess","codeLength","maxGuesses","showCurrent","length","emptyRows","Math","max","renderFeedback","feedback","correct","wrongPosition","dots","i","push","className","fileName","_jsxFileName","lineNumber","columnNumber","remaining","renderBlock","color","idx","isCurrent","style","background","border","width","height","borderRadius","display","margin","children","opacity","map","guess","index","Array","from","_","_guess$code","code","__","digitIdx","_c","propTypes","arrayOf","shape","string","number","$RefreshReg$"],"sources":["C:/Users/Beej/Documents/Block-Lock/client/src/components/GameBoard.js"],"sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './GameBoard.css';\r\n\r\n/**\r\n * GameBoard component for Block Lock game.\r\n * Displays previous guesses, current guess, feedback, and empty rows.\r\n */\r\nconst GameBoard = ({\r\n  guesses = [],\r\n  currentGuess = [],\r\n  codeLength = 4,\r\n  maxGuesses = 10,\r\n}) => {\r\n  // Calculate how many empty rows to display\r\n  const showCurrent = guesses.length < maxGuesses;\r\n  const emptyRows = Math.max(\r\n    0,\r\n    maxGuesses - guesses.length - (showCurrent ? 1 : 0)\r\n  );\r\n\r\n  // Render feedback dots for a guess\r\n  const renderFeedback = (feedback = { correct: 0, wrongPosition: 0 }) => {\r\n    const dots = [];\r\n    for (let i = 0; i < feedback.correct; i++) {\r\n      dots.push(\r\n        <span\r\n          key={`correct-${i}`}\r\n          className=\"feedback-dot correct\"\r\n          aria-label=\"Correct color and position\"\r\n        />\r\n      );\r\n    }\r\n    for (let i = 0; i < feedback.wrongPosition; i++) {\r\n      dots.push(\r\n        <span\r\n          key={`wrong-pos-${i}`}\r\n          className=\"feedback-dot wrong-position\"\r\n          aria-label=\"Correct color, wrong position\"\r\n        />\r\n      );\r\n    }\r\n    const remaining = codeLength - feedback.correct - feedback.wrongPosition;\r\n    for (let i = 0; i < remaining; i++) {\r\n      dots.push(\r\n        <span\r\n          key={`incorrect-${i}`}\r\n          className=\"feedback-dot incorrect\"\r\n          aria-label=\"Incorrect\"\r\n        />\r\n      );\r\n    }\r\n    return dots;\r\n  };\r\n\r\n  // Render a single color block\r\n  const renderBlock = (color, idx, isCurrent) => (\r\n    <span\r\n      key={idx}\r\n      className={`color-block${isCurrent ? ' current' : ''}`}\r\n      aria-label={color ? `Color ${color}` : 'Empty slot'}\r\n      style={{\r\n        background: color || '#eee',\r\n        border: color ? '2px solid #333' : '2px dashed #bbb',\r\n        width: 28,\r\n        height: 28,\r\n        borderRadius: '50%',\r\n        display: 'inline-block',\r\n        margin: 2,\r\n      }}\r\n    >\r\n      {!color && <span style={{ opacity: 0.2 }}>?</span>}\r\n    </span>\r\n  );\r\n\r\n  return (\r\n    <div className=\"gameboard-container\">\r\n      <div className=\"gameboard\">\r\n        <div className=\"gameboard-header\">\r\n          <div className=\"guess-column\">Guess</div>\r\n          <div className=\"feedback-column\">Feedback</div>\r\n        </div>\r\n        <div className=\"gameboard-rows\">\r\n          {/* Previous guesses */}\r\n          {guesses.map((guess, index) => (\r\n            <div key={`guess-${index}`} className=\"gameboard-row completed\">\r\n              <div className=\"guess-display\">\r\n                {Array.from({ length: codeLength }, (_, idx) =>\r\n                  renderBlock(guess.code?.[idx], idx, false)\r\n                )}\r\n              </div>\r\n              <div className=\"feedback-display\">\r\n                {renderFeedback(guess.feedback)}\r\n              </div>\r\n            </div>\r\n          ))}\r\n\r\n          {/* Current guess row */}\r\n          {showCurrent && (\r\n            <div className=\"gameboard-row current\">\r\n              <div className=\"guess-display\">\r\n                {Array.from({ length: codeLength }, (_, idx) =>\r\n                  renderBlock(currentGuess?.[idx], idx, true)\r\n                )}\r\n              </div>\r\n              <div className=\"feedback-display\">\r\n                <span className=\"feedback-placeholder\" aria-label=\"Awaiting feedback\">\r\n                  ?\r\n                </span>\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {/* Empty rows */}\r\n          {Array.from({ length: emptyRows }, (_, index) => (\r\n            <div key={`empty-${index}`} className=\"gameboard-row empty\">\r\n              <div className=\"guess-display\">\r\n                {Array.from({ length: codeLength }, (__, digitIdx) =>\r\n                  renderBlock(null, digitIdx, false)\r\n                )}\r\n              </div>\r\n              <div className=\"feedback-display\">\r\n                <span className=\"feedback-placeholder\" aria-label=\"Empty feedback\">\r\n                  -\r\n                </span>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n        <div className=\"gameboard-footer\">\r\n          <p>\r\n            Attempts: {guesses.length}\r\n            {showCurrent ? `/${maxGuesses}` : ` (max reached)`}\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nGameBoard.propTypes = {\r\n  guesses: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      code: PropTypes.arrayOf(PropTypes.string),\r\n      feedback: PropTypes.shape({\r\n        correct: PropTypes.number,\r\n        wrongPosition: PropTypes.number,\r\n      }),\r\n    })\r\n  ),\r\n  currentGuess: PropTypes.arrayOf(PropTypes.string),\r\n  codeLength: PropTypes.number,\r\n  maxGuesses: PropTypes.number,\r\n};\r\n\r\nexport default GameBoard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}